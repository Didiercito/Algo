// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct AppFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> AppFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::AppFactory for AppFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, app_factory::io::New>::new(self.remoting.clone(), ())
    }
}

pub mod app_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
    }
}
pub struct UserRegistration<R> {
    remoting: R,
}
impl<R> UserRegistration<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::UserRegistration for UserRegistration<R> {
    type Args = R::Args;
    fn register(&mut self, user_name: String) -> impl Call<Output = bool, Args = R::Args> {
        RemotingAction::<_, user_registration::io::Register>::new(self.remoting.clone(), user_name)
    }
    fn get_users(&self) -> impl Query<Output = IoUserRegistrationState, Args = R::Args> {
        RemotingAction::<_, user_registration::io::GetUsers>::new(self.remoting.clone(), ())
    }
}

pub mod user_registration {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct Register(());
        impl Register {
            #[allow(dead_code)]
            pub fn encode_call(user_name: String) -> Vec<u8> {
                <Register as ActionIo>::encode_call(&user_name)
            }
        }
        impl ActionIo for Register {
            const ROUTE: &'static [u8] = &[
                64, 85, 115, 101, 114, 82, 101, 103, 105, 115, 116, 114, 97, 116, 105, 111, 110,
                32, 82, 101, 103, 105, 115, 116, 101, 114,
            ];
            type Params = String;
            type Reply = bool;
        }
        pub struct GetUsers(());
        impl GetUsers {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <GetUsers as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for GetUsers {
            const ROUTE: &'static [u8] = &[
                64, 85, 115, 101, 114, 82, 101, 103, 105, 115, 116, 114, 97, 116, 105, 111, 110,
                32, 71, 101, 116, 85, 115, 101, 114, 115,
            ];
            type Params = ();
            type Reply = super::IoUserRegistrationState;
        }
    }
}
#[derive(PartialEq, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct IoUserRegistrationState {
    pub all_users: Vec<(ActorId, String)>,
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait AppFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait UserRegistration {
        type Args;
        fn register(&mut self, user_name: String) -> impl Call<Output = bool, Args = Self::Args>;
        fn get_users(&self) -> impl Query<Output = IoUserRegistrationState, Args = Self::Args>;
    }
}
